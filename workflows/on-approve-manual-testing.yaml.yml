name: Deploy tag to production server

on:
    workflow_dispatch:
        inputs:
            release_tag:
                description: 'Tag to deploy (e.g., v1.0.0)'
                required: true
                type: string
            release_id:
                description: 'Release ID from database'
                required: true
                type: string

env:
    SERVICE_NAME: loom-content

jobs:
    deploy-to-production:
        runs-on: self-hosted


        steps:
            -   name: Validate inputs
                run: |
                    if [[ ! "${{ github.event.inputs.release_tag }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
                      echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–≥–∞: ${{ github.event.inputs.release_tag }}"
                      echo "   –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç: v1.0.0"
                      exit 1
                    fi
                    
                    if [[ ! "${{ github.event.inputs.release_id }}" =~ ^[0-9]+$ ]]; then
                      echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç release_id: ${{ github.event.inputs.release_id }}"
                      echo "   –û–∂–∏–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
                      exit 1
                    fi
                    
                    echo "RELEASE_VERSION=${{ github.event.inputs.release_tag }}" >> $GITHUB_ENV
                    echo "RELEASE_ID=${{ github.event.inputs.release_id }}" >> $GITHUB_ENV
                    echo "‚úÖ –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞–ª–∏–¥–Ω—ã"
                    echo "‚úÖ –¢–µ–≥: ${{ github.event.inputs.release_tag }}"
                    echo "‚úÖ Release ID: ${{ github.event.inputs.release_id }}"

            -   name: Load server configuration
                run: |
                    if [ ! -f "/root/.env.servers" ]; then
                      echo "‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ .env.servers –Ω–µ –Ω–∞–π–¥–µ–Ω!"
                      exit 1
                    fi
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.servers
                    set -a
                    source /root/.env.servers
                    set +a
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                    if [ -z "$LOOM_RELEASE_TG_BOT_API_URL" ] || [ -z "$LOOM_INTERSERVER_SECRET_KEY" ]; then
                      echo "‚ùå API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env.servers!"
                      echo "   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –µ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: LOOM_RELEASE_TG_BOT_API_URL –∏ LOOM_INTERSERVER_SECRET_KEY"
                      exit 1
                    fi
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–∞
                    HOST_VAR="PROD_HOST"
                    PASSWORD_VAR="PROD_PASSWORD"
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
                    eval "SERVER_HOST=\$$HOST_VAR"
                    eval "SERVER_PASSWORD=\$$PASSWORD_VAR"
                    
                    if [ -z "$SERVER_HOST" ] || [ -z "$SERVER_PASSWORD" ]; then
                      echo "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è prod —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
                      echo "   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ .env.servers –µ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${HOST_VAR} –∏ ${PASSWORD_VAR}"
                      exit 1
                    fi
                    
                    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                    echo "LOOM_RELEASE_TG_BOT_API_URL=$LOOM_RELEASE_TG_BOT_API_URL" >> $GITHUB_ENV
                    echo "LOOM_INTERSERVER_SECRET_KEY=$LOOM_INTERSERVER_SECRET_KEY" >> $GITHUB_ENV
                    echo "SERVER_HOST=$SERVER_HOST" >> $GITHUB_ENV
                    echo "SERVER_PASSWORD=$SERVER_PASSWORD" >> $GITHUB_ENV
                    echo "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
                    echo "‚úÖ API URL: $LOOM_RELEASE_TG_BOT_API_URL"
                    echo "‚úÖ Prod —Å–µ—Ä–≤–µ—Ä: $SERVER_HOST"

            -   name: Update status to production deployment
                run: |
                    RESPONSE=$(curl -s -w "\n%{http_code}" -X PATCH \
                      -H "Content-Type: application/json" \
                      -d '{
                        "release_id": ${{ env.RELEASE_ID }},
                        "status": "deploying",
                        "github_run_id": "${{ github.run_id }}",
                        "github_action_link": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                      }' \
                      "${{ env.LOOM_RELEASE_TG_BOT_API_URL }}/release")
                    
                    HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
                    BODY=$(echo "$RESPONSE" | head -n -1)
                    
                    if [ "$HTTP_CODE" -ne 200 ]; then
                      echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ–ª–∏–∑–∞. HTTP –∫–æ–¥: $HTTP_CODE"
                      echo "–û—Ç–≤–µ—Ç: $BODY"
                      exit 1
                    fi
                    
                    echo "‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'deploying'"

            -   name: Deploy to production server
                id: deploy_step
                run: |
                    SSH_OUTPUT=$(sshpass -p "${{ env.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no root@${{ env.SERVER_HOST }} -p 22 << 'EOF' 2>&1
                    set -e
                    
                    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                    mkdir -p /var/log/deployments/production/${{ env.SERVICE_NAME }}
                    
                    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –ª–æ–≥–∞ —Å –∏–º–µ–Ω–µ–º —Ç–µ–≥–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω –¥–µ–ø–ª–æ—è
                    LOG_FILE="/var/log/deployments/production/${{ env.SERVICE_NAME }}/${{ env.RELEASE_VERSION }}-prod.log"
                    
                    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                    log_message() {
                        local message="$1"
                        echo "$(date '+%Y-%m-%d %H:%M:%S') - $message" | tee -a "$LOG_FILE"
                    }
                    
                    log_message "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–¥–∞–∫—à–Ω –¥–µ–ø–ª–æ–π —Ç–µ–≥–∞ ${{ env.RELEASE_VERSION }}"
                    log_message "üîó Release ID: ${{ env.RELEASE_ID }}"
                    
                    cd loom/${{ env.SERVICE_NAME }}
                    
                    log_message "üì• –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏ —Ç–µ–≥–∏"
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É/—Ç–µ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                    CURRENT_REF=$(git symbolic-ref --short HEAD 2>/dev/null || git describe --tags --exact-match 2>/dev/null || git rev-parse --short HEAD)
                    log_message "üîç –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: $CURRENT_REF"
                    
                    if git tag -l | grep -q "^${{ env.RELEASE_VERSION }}$"; then
                        log_message "üè∑Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ–≥ ${{ env.RELEASE_VERSION }} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
                        git tag -d ${{ env.RELEASE_VERSION }} 2>&1 | tee -a "$LOG_FILE"
                    fi
                    
                    log_message "üì• –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
                    git fetch origin 2>&1 | tee -a "$LOG_FILE"
                    
                    log_message "üì• –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–≥–∏"
                    git fetch origin --tags --force 2>&1 | tee -a "$LOG_FILE"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–≥ —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω
                    if ! git tag -l | grep -q "^${{ env.RELEASE_VERSION }}$"; then
                        log_message "‚ùå –¢–µ–≥ ${{ env.RELEASE_VERSION }} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!"
                        log_message "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏:"
                        git tag -l | tail -10 | tee -a "$LOG_FILE"
                        exit 1
                    fi
                    
                    log_message "‚úÖ –¢–µ–≥ ${{ env.RELEASE_VERSION }} –Ω–∞–π–¥–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"

                    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ç–µ–≥
                    log_message "üè∑Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ç–µ–≥ ${{ env.RELEASE_VERSION }}"
                    git checkout ${{ env.RELEASE_VERSION }} 2>&1 | tee -a "$LOG_FILE"
                    
                    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≤–µ—Ç–∫–∏ (–∫—Ä–æ–º–µ main/master)
                    log_message "üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≤–µ—Ç–∫–∏"
                    git for-each-ref --format='%(refname:short)' refs/heads | grep -v -E "^(main|master)$" | xargs -r git branch -D 2>&1 | tee -a "$LOG_FILE"
                    
                    # –û—á–∏—â–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –≤–µ—Ç–∫–∏
                    log_message "üßπ –û—á–∏—â–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –≤–µ—Ç–∫–∏"
                    git remote prune origin 2>&1 | tee -a "$LOG_FILE"
                    
                    log_message "‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ç–µ–≥ ${{ env.RELEASE_VERSION }} –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
                    
                    cd ../loom-system
                    
                    export $(cat env/.env.app env/.env.db env/.env.monitoring | xargs)
                    
                    log_message "üî® –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —Ç–µ–≥–∞ ${{ env.RELEASE_VERSION }} –Ω–∞ –ü–†–û–î–ê–ö–®–ù..."

                    docker compose -f ./docker-compose/app.yaml up -d --build ${{ env.SERVICE_NAME }} 2>&1 | tee -a "$LOG_FILE"
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑–∞—Ö
                    log_message "üìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–∑—ã:"
                    docker images | grep ${{ env.SERVICE_NAME }} | tee -a "$LOG_FILE"
                    
                    check_health() {
                        # –ï—Å–ª–∏ –µ—Å—Ç—å HTTP endpoint
                        if curl -f -s -o /dev/null -w "%{http_code}" http://localhost:8004/api/content/health | grep -q "200"; then
                            return 0
                        else
                            return 1
                        fi
                    }
                    
                    MAX_ATTEMPTS=5
                    ATTEMPT=1
                    SUCCESS=false
                    
                    log_message "‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω..."
                    sleep 15
                    
                    while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
                        log_message "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ health –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω (–ø–æ–ø—ã—Ç–∫–∞ $ATTEMPT –∏–∑ $MAX_ATTEMPTS)..."
                    
                        if check_health; then
                            log_message "‚úÖ Health check –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω –ø—Ä–æ–π–¥–µ–Ω!"
                            SUCCESS=true
                            break
                        else
                            log_message "‚è≥ Health check –Ω–µ –ø—Ä–æ–π–¥–µ–Ω, –∂–¥–µ–º..."
                            sleep 20
                        fi
                    
                        ATTEMPT=$((ATTEMPT + 1))
                    done
                    
                    if [ "$SUCCESS" = false ]; then
                        log_message "‚ùå Health check –Ω–µ –ø—Ä–æ–π–¥–µ–Ω –ø–æ—Å–ª–µ $MAX_ATTEMPTS –ø–æ–ø—ã—Ç–æ–∫"
                        log_message "üìã –õ–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:"
                        docker logs --tail 100 ${{ env.SERVICE_NAME }} 2>&1 | tee -a "$LOG_FILE"
                        exit 1
                    fi
                    
                    log_message "üéâ –¢–µ–≥ ${{ env.RELEASE_VERSION }} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –Ω–∞ –ü–†–û–î–ê–ö–®–ù –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!"
                    log_message "üìÅ –õ–æ–≥ –ø—Ä–æ–¥–∞–∫—à–Ω –¥–µ–ø–ª–æ—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: $LOG_FILE"
                    
                    # –í—ã–≤–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞ –¥–ª—è GitHub Actions
                    echo "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞ –ø—Ä–æ–¥–∞–∫—à–Ω –¥–µ–ø–ª–æ—è:"
                    tail -20 "$LOG_FILE"
                    EOF
                    )
                    
                    SSH_EXIT_CODE=$?
                    
                    if [ $SSH_EXIT_CODE -ne 0 ]; then
                        echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä:"
                        echo "$SSH_OUTPUT"
                        exit 1
                    fi
                    
                    echo "‚úÖ –î–µ–ø–ª–æ–π –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ"

            -   name: Update status on failure
                if: failure()
                run: |
                    curl -s -X PATCH \
                      -H "Content-Type: application/json" \
                      -d '{
                        "release_id": ${{ env.RELEASE_ID }},
                        "status": "production_failed"
                      }' \
                      "${{ env.LOOM_RELEASE_TG_BOT_API_URL }}/release"
                    echo "‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'production_failed'"
                    echo "üìä –°–µ—Ä–≤–µ—Ä: ${{ env.SERVER_HOST }}"
                    echo "üè∑Ô∏è –í–µ—Ä—Å–∏—è: ${{ env.RELEASE_VERSION }}"
                    echo "üîó Release ID: ${{ env.RELEASE_ID }}"
                    echo "üìÅ –õ–æ–≥ –ø—Ä–æ–¥–∞–∫—à–Ω –¥–µ–ø–ª–æ—è: /var/log/deployments/production/${{ env.SERVICE_NAME }}/${{ env.RELEASE_VERSION }}-prod.log"

            -   name: Update status to production success
                if: success()
                run: |
                    curl -s -X PATCH \
                      -H "Content-Type: application/json" \
                      -d '{
                        "release_id": ${{ env.RELEASE_ID }},
                        "status": "deployed"
                      }' \
                      "${{ env.LOOM_RELEASE_TG_BOT_API_URL }}/release"
                    echo "‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'deployed'"

            -   name: Verify production deployment
                if: success()
                run: |
                    echo "üéâüéâüéâ –ü–†–û–î–ê–ö–®–ù –î–ï–ü–õ–û–ô –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û üéâüéâüéâ"
                    echo "üìä –°–µ—Ä–≤–µ—Ä: ${{ env.SERVER_HOST }}"
                    echo "üè∑Ô∏è –í–µ—Ä—Å–∏—è: ${{ env.RELEASE_VERSION }}"
                    echo "‚úÖ –°—Ç–∞—Ç—É—Å: –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω"
                    echo "üîó Release ID: ${{ env.RELEASE_ID }}"
                    echo "üìÅ –õ–æ–≥ –ø—Ä–æ–¥–∞–∫—à–Ω –¥–µ–ø–ª–æ—è: /var/log/deployments/production/${{ env.SERVICE_NAME }}/${{ env.RELEASE_VERSION }}-prod.log"