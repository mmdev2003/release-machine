name: Update version tag on test server

on:
    create:
        tags:
            - 'v*'

env:
    SERVICE_NAME: loom-content

jobs:
    update-tag-on-server:
        runs-on: self-hosted
        if: github.event.ref_type == 'tag'

        steps:
            -   name: Extract tag name
                run: |
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ç–µ–≥–∞ –∏–∑ ref
                    TAG_NAME=${GITHUB_REF#refs/tags/}
                    echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
                    echo "‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–≥: $TAG_NAME"

            -   name: Load server configuration
                run: |
                    if [ ! -f "/root/.env.servers" ]; then
                      echo "‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ .env.servers –Ω–µ –Ω–∞–π–¥–µ–Ω!"
                      exit 1
                    fi

                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.servers
                    set -a
                    source /root/.env.servers
                    set +a


                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                    if [ -z "$LOOM_RELEASE_TG_BOT_API_URL" ] || [ -z "$LOOM_INTERSERVER_SECRET_KEY" ]; then
                      echo "‚ùå API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env.servers!"
                      echo "   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –µ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: LOOM_RELEASE_TG_BOT_API_URL –∏ LOOM_INTERSERVER_SECRET_KEY"
                      exit 1
                    fi

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
                    HOST_VAR="STAGE_HOST"
                    PASSWORD_VAR="STAGE_PASSWORD"

                    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
                    eval "SERVER_HOST=\$$HOST_VAR"
                    eval "SERVER_PASSWORD=\$$PASSWORD_VAR"

                    if [ -z "$SERVER_HOST" ] || [ -z "$SERVER_PASSWORD" ]; then
                      echo "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è stage —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
                      echo "   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ .env.servers –µ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${HOST_VAR} –∏ ${PASSWORD_VAR}"
                      exit 1
                    fi

                    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                    echo "LOOM_RELEASE_TG_BOT_API_URL=$LOOM_RELEASE_TG_BOT_API_URL" >> $GITHUB_ENV
                    echo "LOOM_INTERSERVER_SECRET_KEY=$LOOM_INTERSERVER_SECRET_KEY" >> $GITHUB_ENV
                    echo "SERVER_HOST=$SERVER_HOST" >> $GITHUB_ENV
                    echo "SERVER_PASSWORD=$SERVER_PASSWORD" >> $GITHUB_ENV
                    echo "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
                    echo "‚úÖ API URL: $LOOM_RELEASE_TG_BOT_API_URL"
                    echo "‚úÖ Stage —Å–µ—Ä–≤–µ—Ä: $SERVER_HOST"

            -   name: Create release record
                run: |
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–µ–ª–∏–∑–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
                          -H "Content-Type: application/json" \
                          -d '{
                            "service_name": "${{ env.SERVICE_NAME }}",
                            "release_tag": "${{ env.TAG_NAME }}",
                            "status": "initiated",
                            "initiated_by": "${{ github.actor }}",
                            "github_run_id": "${{ github.run_id }}",
                            "github_action_link": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                            "github_ref": "${{ github.ref }}"
                          }' \
                          "${{ env.LOOM_RELEASE_TG_BOT_API_URL }}/release")
                    
                    HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
                    BODY=$(echo "$RESPONSE" | head -n -1)
                    
                    if [ "$HTTP_CODE" -ne 201 ]; then
                      echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –æ —Ä–µ–ª–∏–∑–µ. HTTP –∫–æ–¥: $HTTP_CODE"
                      echo "–û—Ç–≤–µ—Ç: $BODY"
                      exit 1
                    fi
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ä–µ–ª–∏–∑–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞
                    RELEASE_ID=$(echo "$BODY" | grep -o '"release_id":[0-9]*' | sed 's/"release_id"://')
                    echo "RELEASE_ID=$RELEASE_ID" >> $GITHUB_ENV
                    echo "‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –æ —Ä–µ–ª–∏–∑–µ —Å ID: $RELEASE_ID"

            -   name: Update status to building
                run: |
                    curl -s -X PATCH \
                      -H "Content-Type: application/json" \
                      -d '{
                        "release_id": ${{ env.RELEASE_ID }},
                        "status": "building"
                      }' \
                      "${{ env.LOOM_RELEASE_TG_BOT_API_URL }}/release"
                    echo "‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'building'"

            -   name: Update tag on test server
                id: deploy_step
                run: |
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º sshpass –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ –ø–∞—Ä–æ–ª—é
                    SSH_OUTPUT=$(sshpass -p "${{ env.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no root@${{ env.SERVER_HOST }} -p 22 << 'EOF' 2>&1
                    set -e

                    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                    mkdir -p /var/log/deployments/${{ env.SERVICE_NAME }}
                    
                    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –ª–æ–≥–∞ —Å –∏–º–µ–Ω–µ–º —Ç–µ–≥–∞
                    LOG_FILE="/var/log/deployments/${{ env.SERVICE_NAME }}/${{ env.TAG_NAME }}.log"
                    
                    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                    log_message() {
                        local message="$1"
                        echo "$(date '+%Y-%m-%d %H:%M:%S') - $message" | tee -a "$LOG_FILE"
                    }
                    
                    log_message "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π —Ç–µ–≥–∞ ${{ env.TAG_NAME }}"

                    cd loom/${{ env.SERVICE_NAME }}
                    log_message "üì• –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏ —Ç–µ–≥–∏"
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É/—Ç–µ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                    CURRENT_REF=$(git symbolic-ref --short HEAD 2>/dev/null || git describe --tags --exact-match 2>/dev/null || git rev-parse --short HEAD)
                    log_message "üîç –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: $CURRENT_REF"
                    
                    if git tag -l | grep -q "^${{ env.TAG_NAME }}$"; then
                        log_message "üè∑Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ–≥ ${{ env.TAG_NAME }} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
                        git tag -d ${{ env.TAG_NAME }} 2>&1 | tee -a "$LOG_FILE"
                    fi
                    
                    log_message "üì• –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
                    git fetch origin 2>&1 | tee -a "$LOG_FILE"
                    
                    log_message "üì• –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–≥–∏"
                    git fetch origin --tags --force 2>&1 | tee -a "$LOG_FILE"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–≥ —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω
                    if ! git tag -l | grep -q "^${{ env.TAG_NAME }}$"; then
                        log_message "‚ùå –¢–µ–≥ ${{ env.TAG_NAME }} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!"
                        log_message "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏:"
                        git tag -l | tail -10 | tee -a "$LOG_FILE"
                        exit 1
                    fi
                    
                    log_message "‚úÖ –¢–µ–≥ ${{ env.TAG_NAME }} –Ω–∞–π–¥–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"

                    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ç–µ–≥
                    log_message "üè∑Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ç–µ–≥ ${{ env.TAG_NAME }}"
                    git checkout ${{ env.TAG_NAME }} 2>&1 | tee -a "$LOG_FILE"

                    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≤–µ—Ç–∫–∏ (–∫—Ä–æ–º–µ main/master)
                    log_message "üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≤–µ—Ç–∫–∏"
                    git for-each-ref --format='%(refname:short)' refs/heads | grep -v -E "^(main|master)$" | xargs -r git branch -D 2>&1 | tee -a "$LOG_FILE"

                    # –û—á–∏—â–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –≤–µ—Ç–∫–∏
                    log_message "üßπ –û—á–∏—â–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –≤–µ—Ç–∫–∏"
                    git remote prune origin 2>&1 | tee -a "$LOG_FILE"

                    log_message "‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ç–µ–≥ ${{ env.TAG_NAME }} –∑–∞–≤–µ—Ä—à–µ–Ω–æ"

                    cd ../loom-system

                    export $(cat env/.env.app env/.env.db env/.env.monitoring | xargs)

                    log_message "üî® –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —Ç–µ–≥–∞ ${{ env.TAG_NAME }}..."
                    docker compose -f ./docker-compose/app.yaml up -d --build ${{ env.SERVICE_NAME }} 2>&1 | tee -a "$LOG_FILE"

                    check_health() {
                        # –ï—Å–ª–∏ –µ—Å—Ç—å HTTP endpoint
                        if curl -f -s -o /dev/null -w "%{http_code}" http://localhost:8004/api/content/health | grep -q "200"; then
                            return 0
                        else
                            return 1
                        fi
                    }

                    MAX_ATTEMPTS=3
                    ATTEMPT=1
                    SUCCESS=false

                    log_message "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞..."
                    sleep 10

                    while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
                        log_message "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ health (–ø–æ–ø—ã—Ç–∫–∞ $ATTEMPT –∏–∑ $MAX_ATTEMPTS)..."

                        if check_health; then
                            log_message "‚úÖ Health check –ø—Ä–æ–π–¥–µ–Ω!"
                            SUCCESS=true
                            break
                        else
                            log_message "‚è≥ Health check –Ω–µ –ø—Ä–æ–π–¥–µ–Ω, –∂–¥–µ–º..."
                            sleep 15
                        fi

                        ATTEMPT=$((ATTEMPT + 1))
                    done

                    if [ "$SUCCESS" = false ]; then
                        log_message "‚ùå Health check –Ω–µ –ø—Ä–æ–π–¥–µ–Ω –ø–æ—Å–ª–µ $MAX_ATTEMPTS –ø–æ–ø—ã—Ç–æ–∫"
                        log_message "üìã –õ–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:"
                        docker logs --tail 50 ${{ env.SERVICE_NAME }} 2>&1 | tee -a "$LOG_FILE"
                        exit 1
                    fi

                    log_message "‚úÖ –¢–µ–≥ ${{ env.TAG_NAME }} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!"
                    log_message "üìÅ –õ–æ–≥ –¥–µ–ø–ª–æ—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: $LOG_FILE"
                    
                    # –í—ã–≤–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞ –¥–ª—è GitHub Actions
                    echo "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞ –¥–µ–ø–ª–æ—è:"
                    tail -20 "$LOG_FILE"
                    EOF
                    )

                    SSH_EXIT_CODE=$?
                    
                    if [ $SSH_EXIT_CODE -ne 0 ]; then
                        echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä:"
                        echo "$SSH_OUTPUT"
                        exit 1
                    fi
                    
                    echo "‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ"

            - name: Update status on failure
              if: failure()
              run: |
                curl -s -X PATCH \
                  -H "Content-Type: application/json" \
                  -d '{
                    "release_id": ${{ env.RELEASE_ID }},
                    "status": "staging_failed"
                  }' \
                  "${{ env.LOOM_RELEASE_TG_BOT_API_URL }}/release"
                echo "‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'staging_failed'"

            -   name: Update status to manual testing
                if: success()
                run: |
                    curl -s -X PATCH \
                      -H "Content-Type: application/json" \
                      -d '{
                        "release_id": ${{ env.RELEASE_ID }},
                        "status": "manual_testing"
                      }' \
                      "${{ env.LOOM_RELEASE_TG_BOT_API_URL }}/release"
                    echo "‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'manual_testing'"

            -   name: Verify deployment
                if: success()
                run: |
                    echo "üéâ –î–µ–ø–ª–æ–π —Ç–µ–≥–∞ ${{ env.TAG_NAME }} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ"
                    echo "üìä –°–µ—Ä–≤–µ—Ä: ${{ env.SERVER_HOST }}"
                    echo "üè∑Ô∏è –í–µ—Ä—Å–∏—è: ${{ env.TAG_NAME }}"
                    echo "üß™ –°—Ç–∞—Ç—É—Å: –ì–æ—Ç–æ–≤ –∫ —Ä—É—á–Ω–æ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é"
                    echo "üìÅ –õ–æ–≥ –¥–µ–ø–ª–æ—è: /var/log/deployments/${{ env.TAG_NAME }}.log"

            -   name: Handle deployment failure
                if: failure()
                run: |
                    echo "‚ùå –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π"
                    echo "üìä –°–µ—Ä–≤–µ—Ä: ${{ env.SERVER_HOST }}"
                    echo "üè∑Ô∏è –í–µ—Ä—Å–∏—è: ${{ env.TAG_NAME }}"
                    echo "üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
                    echo "üìÅ –õ–æ–≥ –¥–µ–ø–ª–æ—è: /var/log/deployments/${{ env.TAG_NAME }}.log"