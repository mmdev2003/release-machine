name: Push in work brunch - Update Dev Server

on:
    push:
        branches:
            - '**'
            - '!main'
            - '!master'
            - '!develop'

jobs:
    update-branch:
        runs-on: self-hosted

        steps:
            -   name: Get branch and author info
                run: |
                    echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
                    echo "AUTHOR_NAME=${{ github.actor }}" >> $GITHUB_ENV

            -   name: Load server configuration and check assignment
                run: |
                    if [ ! -f "/root/.env.servers" ]; then
                      echo "‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ .env.servers –Ω–µ –Ω–∞–π–¥–µ–Ω!"
                      exit 1
                    fi
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.servers
                    set -a
                    source /root/.env.servers
                    set +a
                    
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–≤—Ç–æ—Ä–∞
                    HOST_VAR="${AUTHOR_NAME}_HOST"
                    PASSWORD_VAR="${AUTHOR_NAME}_PASSWORD"
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
                    eval "SERVER_HOST=\$$HOST_VAR"
                    eval "SERVER_PASSWORD=\$$PASSWORD_VAR"
                    
                    if [ -z "$SERVER_HOST" ] || [ -z "$SERVER_PASSWORD" ]; then
                      echo "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ $AUTHOR_NAME –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
                      echo "   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ .env.servers –µ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${HOST_VAR} –∏ ${PASSWORD_VAR}"
                      exit 1
                    fi
                    
                    echo "SERVER_HOST=$SERVER_HOST" >> $GITHUB_ENV
                    echo "SERVER_PASSWORD=$SERVER_PASSWORD" >> $GITHUB_ENV
                    echo "‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è $AUTHOR_NAME: $SERVER_HOST"

            -   name: Update branch on developer server
                run: |
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º sshpass –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ –ø–∞—Ä–æ–ª—é
                    sshpass -p "${{ env.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no root@${{ env.SERVER_HOST }} -p 22 << 'EOF'
                    echo "üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ç–∫—É ${{ env.BRANCH_NAME }} –¥–ª—è ${{ env.AUTHOR_NAME }}"
                    
                    cd loom/loom-content
                    git fetch origin
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                    CURRENT_BRANCH=$(git branch --show-current)
                    
                    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≤–µ—Ç–∫–∏ –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –Ω–µ main
                    if [ "$CURRENT_BRANCH" != "main" ] && [ "$CURRENT_BRANCH" != "master" ]; then
                        echo "üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≤–µ—Ç–∫–∏ (—Ç–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: $CURRENT_BRANCH)"
                    
                        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ main –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ—Ç–æ–∫
                        git checkout main 2>/dev/null || git checkout master 2>/dev/null || echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ main/master"
                    
                        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –≤–µ—Ç–∫–∏ –∫—Ä–æ–º–µ main/master –∏ —Ç–µ–∫—É—â–µ–π —Ü–µ–ª–µ–≤–æ–π –≤–µ—Ç–∫–∏
                        git branch | grep -v -E "(main|master|\*|${{ env.BRANCH_NAME }})" | xargs -r git branch -D
                    
                        # –û—á–∏—â–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –≤–µ—Ç–∫–∏
                        git remote prune origin
                    
                        echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ –≤–µ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
                    fi
                    
                    if git show-ref --verify --quiet refs/heads/${{ env.BRANCH_NAME }}; then
                        echo "–í–µ—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ, –æ–±–Ω–æ–≤–ª—è–µ–º"
                        git checkout ${{ env.BRANCH_NAME }}
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
                        LOCAL_COMMIT=$(git rev-parse HEAD)
                        REMOTE_COMMIT=$(git rev-parse origin/${{ env.BRANCH_NAME }})
                        
                        if [ "$LOCAL_COMMIT" != "$REMOTE_COMMIT" ]; then
                            echo "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ä–∞—Å—Ö–æ–¥—è—â–∏–µ—Å—è –≤–µ—Ç–∫–∏, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –≤–µ—Ç–∫—É"
                            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è remote
                            git reset --hard origin/${{ env.BRANCH_NAME }}
                        else
                            echo "‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ç–∫–∞ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞"
                        fi
                    else
                        echo "–ü–µ—Ä–≤—ã–π –¥–µ–ø–ª–æ–π –≤–µ—Ç–∫–∏, —Å–æ–∑–¥–∞–µ–º –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è"
                        git checkout -b ${{ env.BRANCH_NAME }} origin/${{ env.BRANCH_NAME }}
                    fi
                    
                    cd ../loom-system
                    
                    
                    export $(cat env/.env.app env/.env.db env/.env.monitoring | xargs)
                    
                    echo "üî® –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
                    docker compose -f ./docker-compose/app.yaml up -d --build loom-content
                    
                    check_health() {
                        # –ï—Å–ª–∏ –µ—Å—Ç—å HTTP endpoint
                        if curl -f -s -o /dev/null -w "%{http_code}" http://localhost:8004/api/content/health | grep -q "200"; then
                            return 0
                        else
                            return 1
                        fi
                    }
                    
                    MAX_ATTEMPTS=2
                    ATTEMPT=1
                    SUCCESS=false
                    
                    sleep 5
                    
                    while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
                        echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ health (–ø–æ–ø—ã—Ç–∫–∞ $ATTEMPT –∏–∑ $MAX_ATTEMPTS)..."
                        
                        if check_health; then
                            echo "‚úÖ Health check –ø—Ä–æ–π–¥–µ–Ω!"
                            SUCCESS=true
                            break
                        else
                            echo "‚è≥ Health check –Ω–µ –ø—Ä–æ–π–¥–µ–Ω, –∂–¥–µ–º..."
                            sleep 10
                        fi
                        
                        ATTEMPT=$((ATTEMPT + 1))
                    done
                    
                    if [ "$SUCCESS" = false ]; then
                        docker logs -f loom-content
                        python3 script/tg_bot_alert.py "‚ùå –í–µ—Ç–∫–∞ loom-content/${{ env.BRANCH_NAME }} –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ${{ env.SERVER_HOST }}!
                    üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ Actions: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    
                        exit 1
                    fi
                    
                    echo "‚úÖ –í–µ—Ç–∫–∞ ${{ env.BRANCH_NAME }} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!"
                    python3 script/tg_bot_alert.py "‚úÖ –í–µ—Ç–∫–∞ loom-content/${{ env.BRANCH_NAME }} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ${{ env.SERVER_HOST }}!"
                    EOF