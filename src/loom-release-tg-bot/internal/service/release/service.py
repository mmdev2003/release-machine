import io
import time

import asyncssh
from opentelemetry.trace import SpanKind, Status, StatusCode

from internal import interface, model


class ReleaseService(interface.IReleaseService):
    def __init__(
            self,
            tel: interface.ITelemetry,
            release_repo: interface.IReleaseRepo,
            prod_host: str,
            prod_password: str,
            service_port_map: dict[str, int],
            loom_release_tg_bot_api_url: str,
    ):
        self.tracer = tel.tracer()
        self.logger = tel.logger()
        self.release_repo = release_repo
        self.prod_host = prod_host
        self.prod_password = prod_password
        self.service_port_map = service_port_map
        self.loom_release_tg_bot_api_url = loom_release_tg_bot_api_url

    async def create_release(
            self,
            service_name: str,
            release_tag: str,
            initiated_by: str,
            github_run_id: str,
            github_action_link: str,
            github_ref: str
    ) -> int:
        with self.tracer.start_as_current_span(
                "ReleaseService.create_release",
                kind=SpanKind.INTERNAL,
                attributes={
                    "service_name": service_name,
                    "release_tag": release_tag,
                    "initiated_by": initiated_by,
                    "github_run_id": github_run_id,
                    "github_ref": github_ref,
                }
        ) as span:
            try:
                release_id = await self.release_repo.create_release(
                    service_name=service_name,
                    release_tag=release_tag,
                    status=model.ReleaseStatus.INITIATED,
                    initiated_by=initiated_by,
                    github_run_id=github_run_id,
                    github_action_link=github_action_link,
                    github_ref=github_ref
                )

                span.set_status(Status(StatusCode.OK))
                return release_id

            except Exception as err:
                self.logger.error(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–ª–∏–∑–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ {service_name}",
                    {
                        "service_name": service_name,
                        "release_tag": release_tag,
                        "error": str(err),
                    }
                )
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                raise err

    async def update_release(
            self,
            release_id: int,
            status: model.ReleaseStatus = None,
            github_run_id: str = None,
            github_action_link: str = None,
            rollback_to_tag: str = None,
    ) -> None:
        with self.tracer.start_as_current_span(
                "ReleaseService.update_release",
                kind=SpanKind.INTERNAL,
                attributes={
                    "release_id": release_id,
                }
        ) as span:
            try:
                await self.release_repo.update_release(
                    release_id=release_id,
                    status=status,
                    github_run_id=github_run_id,
                    github_action_link=github_action_link,
                    rollback_to_tag=rollback_to_tag,
                )

                span.set_status(Status(StatusCode.OK))

            except Exception as err:
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                raise err

    async def get_active_release(self) -> list[model.Release]:
        with self.tracer.start_as_current_span(
                "ReleaseService.get_active_release",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                releases = await self.release_repo.get_active_release()

                span.set_status(Status(StatusCode.OK))
                return releases

            except Exception as err:
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                raise err

    async def get_successful_releases(self) -> list[model.Release]:
        with self.tracer.start_as_current_span(
                "ReleaseService.get_successful_releases",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                releases = await self.release_repo.get_successful_releases( )

                span.set_status(Status(StatusCode.OK))
                return releases

            except Exception as err:
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                raise err

    async def get_failed_releases(self) -> list[model.Release]:
        with self.tracer.start_as_current_span(
                "ReleaseService.get_failed_releases",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                releases = await self.release_repo.get_failed_releases()

                span.set_status(Status(StatusCode.OK))
                return releases

            except Exception as err:
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                raise err

    async def rollback_to_tag(
            self,
            release_id: int,
            service_name: str,
            target_tag: str,
    ):
        async with asyncssh.connect(
                host=self.prod_host,
                username="root",
                password=self.prod_password,
                connect_timeout=30,
                known_hosts=None
        ) as conn:
            timestamp = int(time.time())
            script_file = f"/tmp/rollback_{service_name}_{target_tag}_{timestamp}.sh"

            rollback_script = self._generate_rollback_command(
                release_id=release_id,
                service_name=service_name,
                target_tag=target_tag,
            )

            # Upload the script to the server
            async with conn.start_sftp_client() as sftp:
                async with sftp.open(script_file, 'w') as remote_file:
                    await remote_file.write(rollback_script)

            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
            command = f"chmod +x {script_file} && nohup bash {script_file} > /dev/null 2>&1 & echo $!"

            await conn.run(command, check=False)

    def _generate_rollback_command(self, release_id: int, service_name: str, target_tag: str) -> str:
        prefix = f"/api/{service_name.replace("loom-", "")}"
        port = self.service_port_map[service_name]

        rollback_commands = f"""# –û—Ç–∫–∞—Ç —Å–µ—Ä–≤–∏—Å–∞ {service_name} –Ω–∞ –≤–µ—Ä—Å–∏—é {target_tag}
curl -s -X PATCH \
-H "Content-Type: application/json" \
-d '{{
    "release_id": {release_id},
    "status": "rollback"
}}' \
"{self.loom_release_tg_bot_api_url}/release"
                      
set -e

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
mkdir -p /var/log/deployments/rollback/{service_name}

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –ª–æ–≥–∞ —Å –∏–º–µ–Ω–µ–º –≤–µ—Ä—Å–∏–∏ –¥–ª—è –æ—Ç–∫–∞—Ç–∞
LOG_FILE="/var/log/deployments/rollback/{service_name}/{target_tag}-rollback.log"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_message() {{
    local message="$1"
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $message" | tee -a "$LOG_FILE"
}}

log_message "üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–∫–∞—Ç —Å–µ—Ä–≤–∏—Å–∞ {service_name} –Ω–∞ –≤–µ—Ä—Å–∏—é {target_tag}"

# 1. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–µ—Ä–≤–∏—Å–∞
cd loom/{service_name}

# 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
CURRENT_REF=$(git symbolic-ref --short HEAD 2>/dev/null || git describe --tags --exact-match 2>/dev/null || git rev-parse --short HEAD)
log_message "üîç –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –æ—Ç–∫–∞—Ç–∞: $CURRENT_REF"

# 3. –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏ –≤–µ—Ä—Å–∏–∏
log_message "üì• –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏ —Ç–µ–≥–∏ –¥–ª—è –æ—Ç–∫–∞—Ç–∞..."

if git tag -l | grep -q "^{target_tag}$"; then
    log_message "üè∑Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ–≥ {target_tag} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
    git tag -d {target_tag} 2>&1 | tee -a "$LOG_FILE"
fi

log_message "üì• –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
git fetch origin 2>&1 | tee -a "$LOG_FILE"

log_message "üì• –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–≥–∏"
git fetch origin --tags --force 2>&1 | tee -a "$LOG_FILE"

# 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ —Ç–µ–≥–∞
if ! git tag -l | grep -q "^{target_tag}$"; then
    log_message "‚ùå –¢–µ–≥ {target_tag} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!"
    log_message "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏:"
    git tag -l | tail -10 | tee -a "$LOG_FILE"
    exit 1
fi

log_message "‚úÖ –¢–µ–≥ {target_tag} –Ω–∞–π–¥–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –¥–ª—è –æ—Ç–∫–∞—Ç–∞"

# 5. –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ü–µ–ª–µ–≤–æ–π —Ç–µ–≥
log_message "üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ç–µ–≥ {target_tag} –¥–ª—è –æ—Ç–∫–∞—Ç–∞..."
git checkout {target_tag} 2>&1 | tee -a "$LOG_FILE"

# –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≤–µ—Ç–∫–∏ (–∫—Ä–æ–º–µ main/master)
log_message "üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≤–µ—Ç–∫–∏"
git for-each-ref --format='%(refname:short)' refs/heads | grep -v -E "^(main|master)$" | xargs -r git branch -D 2>&1 | tee -a "$LOG_FILE"

# –û—á–∏—â–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –≤–µ—Ç–∫–∏
log_message "üßπ –û—á–∏—â–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –≤–µ—Ç–∫–∏"
git remote prune origin 2>&1 | tee -a "$LOG_FILE"

log_message "‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ç–µ–≥ {target_tag} –¥–ª—è –æ—Ç–∫–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"

# 6. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–∏—Å—Ç–µ–º—ã
cd ../loom-system

# 7. –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
export $(cat env/.env.app env/.env.db env/.env.monitoring | xargs)

log_message "üî® –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Å–±–æ—Ä–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –æ—Ç–∫–∞—Ç–∞ –Ω–∞ —Ç–µ–≥ {target_tag}..."

log_message "üîß –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –æ—Ç–∫–∞—á–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π..."
docker compose -f ./docker-compose/app.yaml up -d --build {service_name} 2>&1 | tee -a "$LOG_FILE"

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑–∞—Ö
log_message "üìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–∑—ã –ø–æ—Å–ª–µ –æ—Ç–∫–∞—Ç–∞:"
docker images | grep {service_name} | tee -a "$LOG_FILE"

# 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ—Å–ª–µ –æ—Ç–∫–∞—Ç–∞
check_health() {{
    # –ï—Å–ª–∏ –µ—Å—Ç—å HTTP endpoint
    if curl -f -s -o /dev/null -w "%{{http_code}}" http://localhost:{port}{prefix}/health | grep -q "200"; then
        return 0
    else
        return 1
    fi
}}

MAX_ATTEMPTS=5
ATTEMPT=1
SUCCESS=false

log_message "‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ—Å–ª–µ –æ—Ç–∫–∞—Ç–∞..."
sleep 15

while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
    log_message "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ health –ø–æ—Å–ª–µ –æ—Ç–∫–∞—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ $ATTEMPT –∏–∑ $MAX_ATTEMPTS)..."

    if check_health; then
        log_message "‚úÖ Health check –ø—Ä–æ–π–¥–µ–Ω –ø–æ—Å–ª–µ –æ—Ç–∫–∞—Ç–∞!"
        SUCCESS=true
        break
    else
        log_message "‚è≥ Health check –Ω–µ –ø—Ä–æ–π–¥–µ–Ω, –∂–¥–µ–º..."
        sleep 20
    fi

    ATTEMPT=$((ATTEMPT + 1))
done

if [ "$SUCCESS" = false ]; then
    log_message "‚ùå Health check –Ω–µ –ø—Ä–æ–π–¥–µ–Ω –ø–æ—Å–ª–µ $MAX_ATTEMPTS –ø–æ–ø—ã—Ç–æ–∫"
    log_message "üìã –õ–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:"
    docker logs --tail 100 {service_name} 2>&1 | tee -a "$LOG_FILE"
    curl -s -X PATCH \
    -H "Content-Type: application/json" \
    -d '{{
        "release_id": {release_id},
        "status": "rollback_failed"
    }}' \
    "{self.loom_release_tg_bot_api_url}/release"
    exit 1
fi

curl -s -X PATCH \
-H "Content-Type: application/json" \
-d '{{
    "release_id": {release_id},
    "status": "rollback_done"
}}' \
"{self.loom_release_tg_bot_api_url}/release"

log_message "üéâ –û—Ç–∫–∞—Ç –Ω–∞ —Ç–µ–≥ {target_tag} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ! –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç!"
log_message "üìä –°–µ—Ä–≤–∏—Å: {service_name}"
log_message "üè∑Ô∏è –í–µ—Ä—Å–∏—è: {target_tag}"
log_message "‚úÖ –°—Ç–∞—Ç—É—Å: –£—Å–ø–µ—à–Ω–æ –æ—Ç–∫–∞—á–µ–Ω"
log_message "üìÅ –õ–æ–≥ –æ—Ç–∫–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: $LOG_FILE"

# –í—ã–≤–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞
echo "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞ –æ—Ç–∫–∞—Ç–∞:"
tail -20 "$LOG_FILE" 
"""

        return rollback_commands
