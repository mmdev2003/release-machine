import asyncio
import re
from datetime import datetime

import httpx
import openai
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode

from infrastructure.redis_client.redis_client import RedisClient


class AlertManager:
    def __init__(
            self,
            tg_bot_token: str,
            service_name: str,
            alert_tg_chat_id: int,
            alert_tg_chat_thread_id: int,
            grafana_url: str,
            monitoring_redis_host: str,
            monitoring_redis_port: int,
            monitoring_redis_db: int,
            monitoring_redis_password: str,
            openai_api_key: str = None,
    ):
        self.bot = Bot(tg_bot_token)
        self.alert_tg_chat_id = alert_tg_chat_id
        self.alert_tg_chat_thread_id = alert_tg_chat_thread_id
        self.grafana_url = grafana_url
        self.service_name = service_name
        self.redis_client = RedisClient(
            monitoring_redis_host,
            monitoring_redis_port,
            monitoring_redis_db,
            monitoring_redis_password
        )
        if openai_api_key:
            self.openai_client = openai.AsyncOpenAI(
                api_key=openai_api_key,
                http_client=httpx.AsyncClient(proxy="http://32uLYMeQ:jLaDv4WK@193.160.72.227:62940")
            )
        else:
            self.openai_client = None

    def send_error_alert(self, trace_id: str, span_id: str, traceback: str):
        loop = asyncio.get_running_loop()
        loop.create_task(self.__send_error_alert(trace_id, span_id, traceback))

    async def __send_error_alert(self, trace_id: str, span_id: str, traceback: str):
        alert_send = await self.redis_client.get(trace_id)
        if alert_send:
            return

        await self.redis_client.set(trace_id, "1", ttl=30)
        await self.__send_error_alert_to_tg(trace_id, span_id, traceback)

    def _format_telegram_text(self, text: str) -> str:
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã HTML
        text = text.replace('&', '&amp;')
        text = text.replace('<', '&lt;')
        text = text.replace('>', '&gt;')

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞—à–∏ —Ç–µ–≥–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        text = text.replace('&lt;b&gt;', '<b>')
        text = text.replace('&lt;/b&gt;', '</b>')
        text = text.replace('&lt;i&gt;', '<i>')
        text = text.replace('&lt;/i&gt;', '</i>')
        text = text.replace('&lt;code&gt;', '<code>')
        text = text.replace('&lt;/code&gt;', '</code>')
        text = text.replace('&lt;pre&gt;', '<pre>')
        text = text.replace('&lt;/pre&gt;', '</pre>')

        return text
    async def __send_error_alert_to_tg(self, trace_id: str, span_id: str, traceback: str):
        log_link = f"{self.grafana_url}/explore?schemaVersion=1&panes=%7B%220pz%22:%7B%22datasource%22:%22loki%22,%22queries%22:%5B%7B%22refId%22:%22A%22,%22expr%22:%22%7Bservice_name%3D~%5C%22.%2B%5C%22%7D%20%7C%20trace_id%3D%60{trace_id}%60%20%7C%3D%20%60%60%22,%22queryType%22:%22range%22,%22datasource%22:%7B%22type%22:%22loki%22,%22uid%22:%22loki%22%7D,%22editorMode%22:%22code%22,%22direction%22:%22backward%22%7D%5D,%22range%22:%7B%22from%22:%22now-2d%22,%22to%22:%22now%22%7D%7D%7D&orgId=1"
        trace_link = f"{self.grafana_url}/explore?schemaVersion=1&panes=%7B%220pz%22:%7B%22datasource%22:%22tempo%22,%22queries%22:%5B%7B%22refId%22:%22A%22,%22datasource%22:%7B%22type%22:%22tempo%22,%22uid%22:%22tempo%22%7D,%22queryType%22:%22traceql%22,%22limit%22:20,%22tableType%22:%22traces%22,%22metricsQueryType%22:%22range%22,%22query%22:%22{trace_id}%22%7D%5D,%22range%22:%7B%22from%22:%22now-2d%22,%22to%22:%22now%22%7D%7D%7D&orgId=1"

        # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –∞–ª–µ—Ä—Ç–∞
        current_time = datetime.now().strftime("%H:%M:%S")

        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
        text = f"""üö® <b>–û—à–∏–±–∫–∞ –≤ —Å–µ—Ä–≤–∏—Å–µ</b>

<b>–°–µ—Ä–≤–∏—Å:</b> <code>{self.service_name}</code>
<b>–í—Ä–µ–º—è:</b> <code>{current_time}</code>
<b>TraceID:</b> <code>{trace_id}</code>
<b>SpanID:</b> <code>{span_id}</code>"""

        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ LLM –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if self.openai_client is not None:
            try:
                llm_analysis = await self.generate_analysis(traceback)
                if llm_analysis:
                    text += f"\n\n{llm_analysis}"
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ LLM: {e}", flush=True)
                text += f"\n\n<i>‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ LLM –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è Telegram
        text = self._format_telegram_text(text)

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìã –õ–æ–≥–∏", url=log_link),
                InlineKeyboardButton(text="üîç –¢—Ä–µ–π—Å", url=trace_link)
            ]
        ])

        try:
            await self.bot.send_message(
                self.alert_tg_chat_id,
                text,
                message_thread_id=self.alert_tg_chat_thread_id,
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}", flush=True)

            simple_text = f"üö® –û—à–∏–±–∫–∞ –≤ —Å–µ—Ä–≤–∏—Å–µ {self.service_name}\nTraceID: {trace_id}"
            await self.bot.send_message(
                self.alert_tg_chat_id,
                simple_text,
                message_thread_id=self.alert_tg_chat_thread_id,
                reply_markup=keyboard
            )

    async def generate_analysis(self, traceback: str) -> str:
        try:
            system_prompt = """–¢—ã –æ–ø—ã—Ç–Ω—ã–π Python-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É.
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π stacktrace –∏ –¥–∞–π –∫—Ä–∞—Ç–∫–∏–π, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è Telegram (HTML —Ä–∞–∑–º–µ—Ç–∫–∞):
- –ò—Å–ø–æ–ª—å–∑—É–π <b></b> –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤–∞–∂–Ω—ã—Ö —á–∞—Å—Ç–µ–π
- –ò—Å–ø–æ–ª—å–∑—É–π <code></code> –¥–ª—è –∫–æ–¥–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–π —Ñ–∞–π–ª–æ–≤/–º–µ—Ç–æ–¥–æ–≤
- –ò—Å–ø–æ–ª—å–∑—É–π <i></i> –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π
- –ú–∞–∫—Å–∏–º—É–º 300-400 —Å–∏–º–≤–æ–ª–æ–≤
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –ø—Ä–æ–±–ª–µ–º–∞ ‚Üí –ø—Ä–∏—á–∏–Ω–∞ ‚Üí —Ä–µ—à–µ–Ω–∏–µ

–ù–ï –ü–ò–®–ò:
- –î–ª–∏–Ω–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
- –û—á–µ–≤–∏–¥–Ω—ã–µ –≤–µ—â–∏
- "–î–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞", "–í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ"
- –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Å–∞–º–æ–≥–æ traceback

–ü–ò–®–ò:
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏ –ø–æ –¥–µ–ª—É
- –ü—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
- –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã
- –ë—ã—Å—Ç—Ä—ã–µ —Å–ø–æ—Å–æ–±—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            user_message = f"""Stacktrace:
{traceback}

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:
- –°–µ—Ä–≤–∏—Å: {self.service_name}
- –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"""

            history = [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_message}
            ]

            response = await self.openai_client.chat.completions.create(
                model="gpt-4o-mini",
                messages=history,
                temperature=0.2,
            )

            llm_response = response.choices[0].message.content

            if llm_response:
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏
                formatted_response = f"ü§ñ <b>–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏:</b>\n{llm_response.strip()}"
                return formatted_response
            else:
                return ""

        except Exception as err:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {err}", flush=True)
            return ""