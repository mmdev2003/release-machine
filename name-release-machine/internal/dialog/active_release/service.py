from typing import Any

from aiogram.types import CallbackQuery
from aiogram_dialog import DialogManager, ShowMode
from opentelemetry.trace import SpanKind, Status, StatusCode

from internal import interface, model


class ActiveReleaseService(interface.IActiveReleaseService):
    def __init__(
            self,
            tel: interface.ITelemetry,
            release_service: interface.IReleaseService,
            github_client: interface.IGitHubClient,
            required_approve_list: list[str]
    ):
        self.tracer = tel.tracer()
        self.logger = tel.logger()
        self.release_service = release_service
        self.github_client = github_client
        self.required_approve_list = required_approve_list

    async def handle_navigate_release(
            self,
            callback: CallbackQuery,
            button: Any,
            dialog_manager: DialogManager
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —Ä–µ–ª–∏–∑–∞–º–∏"""
        with self.tracer.start_as_current_span(
                "ActiveReleaseService.handle_navigate_release",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                current_index = dialog_manager.dialog_data.get("current_index", 0)
                releases_list = dialog_manager.dialog_data.get("releases_list", [])

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                if button.widget_id == "prev_release":
                    new_index = max(0, current_index - 1)
                else:  # next_release
                    new_index = min(len(releases_list) - 1, current_index + 1)

                if new_index == current_index:
                    await callback.answer()
                    return

                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å
                dialog_manager.dialog_data["current_index"] = new_index

                self.logger.info("–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ä–µ–ª–∏–∑–∞–º")

                await callback.answer()
                span.set_status(Status(StatusCode.OK))

            except Exception as err:
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", show_alert=True)
                raise err

    async def handle_refresh(
            self,
            callback: CallbackQuery,
            button: Any,
            dialog_manager: DialogManager
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–ª–∏–∑–æ–≤"""
        with self.tracer.start_as_current_span(
                "ActiveReleaseService.handle_refresh",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                dialog_manager.show_mode = ShowMode.EDIT

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –∫ –ø–µ—Ä–≤–æ–º—É —Ä–µ–ª–∏–∑—É
                dialog_manager.dialog_data["current_index"] = 0

                # –û—á–∏—â–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                dialog_manager.dialog_data.pop("releases_list", None)
                dialog_manager.dialog_data.pop("current_release", None)

                await callback.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

                self.logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–ª–∏–∑–æ–≤")
                span.set_status(Status(StatusCode.OK))

            except Exception as err:
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)
                raise err

    async def handle_back_to_menu(
            self,
            callback: CallbackQuery,
            button: Any,
            dialog_manager: DialogManager
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        with self.tracer.start_as_current_span(
                "ActiveReleaseService.handle_back_to_menu",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                dialog_manager.show_mode = ShowMode.EDIT

                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∞
                dialog_manager.dialog_data.clear()

                await dialog_manager.start(model.MainMenuStates.main_menu)

                self.logger.info("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                span.set_status(Status(StatusCode.OK))

            except Exception as err:
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
                raise err

    async def handle_confirm_yes(
            self,
            callback: CallbackQuery,
            button: Any,
            dialog_manager: DialogManager
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–ª–∏–∑–∞"""
        with self.tracer.start_as_current_span(
                "ActiveReleaseService.handle_confirm_yes",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                dialog_manager.show_mode = ShowMode.EDIT

                current_release = dialog_manager.dialog_data.get("current_release", {})
                release_id = current_release.get("id")
                approver_username = callback.from_user.username

                if not release_id:
                    raise ValueError("Release ID not found in dialog data")

                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
                current_approved_list = current_release.get("approved_list", [])

                if approver_username not in self.required_approve_list:
                    await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", show_alert=True)
                    return

                if approver_username in current_approved_list:
                    await callback.answer("–í—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏", show_alert=True)
                    return


                if len(current_approved_list) == len(self.required_approve_list) - 1:
                    # –í—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–±—Ä–∞–Ω—ã - –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å—Ç–∞—Ç—É—Å "—Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω" –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –¥–µ–ø–ª–æ–π
                    current_approved_list.append(approver_username)

                    await self.release_service.update_release(
                        release_id=release_id,
                        status=model.ReleaseStatus.MANUAL_TEST_PASSED,
                        approved_list=current_approved_list,
                    )

                    # –ó–∞–ø—É—Å–∫–∞–µ–º GitHub workflow –¥–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω
                    await self.github_client.trigger_workflow(
                        owner="Name",
                        repo=current_release["service_name"],
                        workflow_id="on-approve-manual-testing.yaml.yml",
                        inputs={
                            "release_id": str(release_id),
                            "release_tag": current_release["release_tag"],
                        },
                    )

                    await callback.answer(
                        "‚úÖ –†–µ–ª–∏–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n"
                        "üöÄ –í—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–±—Ä–∞–Ω—ã - –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –¥–µ–ø–ª–æ–π –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω!",
                        show_alert=True
                    )

                    await self._remove_current_release_from_list(dialog_manager)

                    self.logger.info(
                        f"–†–µ–ª–∏–∑ {release_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {approver_username}. "
                        f"–ó–∞–ø—É—â–µ–Ω –¥–µ–ø–ª–æ–π –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω"
                    )
                else:
                    current_approved_list.append(approver_username)

                    await self.release_service.update_release(
                        release_id=release_id,
                        approved_list=current_approved_list,
                    )

                    await callback.answer(f"‚úÖ –í–∞—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—á—Ç–µ–Ω–æ!", show_alert=True)

                    self.logger.info(f"–†–µ–ª–∏–∑ {release_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {approver_username}.")

                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–ª–∏–∑–∞ –≤ dialog_data
                current_release["approved_list"] = current_approved_list
                dialog_manager.dialog_data["current_release"] = current_release

                await dialog_manager.switch_to(model.ActiveReleaseStates.view_releases)

                span.set_status(Status(StatusCode.OK))

            except Exception as err:
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ä–µ–ª–∏–∑–∞", show_alert=True)
                raise err

    async def handle_reject_yes(
            self,
            callback: CallbackQuery,
            button: Any,
            dialog_manager: DialogManager
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ä–µ–ª–∏–∑–∞"""
        with self.tracer.start_as_current_span(
                "ActiveReleaseService.handle_reject_yes",
                kind=SpanKind.INTERNAL
        ) as span:
            try:
                dialog_manager.show_mode = ShowMode.EDIT

                current_release = dialog_manager.dialog_data.get("current_release", {})
                release_id = current_release.get("id")
                rejector_username = callback.from_user.username

                if not release_id:
                    raise ValueError("Release ID not found in dialog data")

                if rejector_username not in self.required_approve_list:
                    await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", show_alert=True)
                    return

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–ª–∏–∑–∞ –Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω
                await self.release_service.update_release(
                    release_id=release_id,
                    status=model.ReleaseStatus.MANUAL_TEST_FAILED
                )

                await callback.answer("‚ùå –†–µ–ª–∏–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω", show_alert=True)

                self.logger.info(f"–†–µ–ª–∏–∑ {release_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {rejector_username}")

                # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–ª–∏–∑ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
                await self._remove_current_release_from_list(dialog_manager)

                await dialog_manager.switch_to(model.ActiveReleaseStates.view_releases)

                span.set_status(Status(StatusCode.OK))

            except Exception as err:
                span.record_exception(err)
                span.set_status(Status(StatusCode.ERROR, str(err)))
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Ä–µ–ª–∏–∑–∞", show_alert=True)
                raise err

    async def _remove_current_release_from_list(self, dialog_manager: DialogManager) -> None:
        """–£–¥–∞–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–ª–∏–∑ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –∏–Ω–¥–µ–∫—Å"""
        releases_list = dialog_manager.dialog_data.get("releases_list", [])
        current_index = dialog_manager.dialog_data.get("current_index", 0)

        if releases_list and current_index < len(releases_list):
            releases_list.pop(current_index)

            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if current_index >= len(releases_list) and releases_list:
                dialog_manager.dialog_data["current_index"] = len(releases_list) - 1
            elif not releases_list:
                dialog_manager.dialog_data["current_index"] = 0

            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–ª–∏–∑–∞
            dialog_manager.dialog_data.pop("current_release", None)