from aiogram_dialog import Window, Dialog
from aiogram_dialog.widgets.text import Const, Format, Case, Multi
from aiogram_dialog.widgets.kbd import Button, Column, Row
from sulguk import SULGUK_PARSE_MODE

from internal import interface, model


class ActiveReleaseDialog(interface.IActiveReleaseDialog):
    def __init__(
            self,
            tel: interface.ITelemetry,
            active_release_service: interface.IActiveReleaseService,
            active_release_getter: interface.IActiveReleaseGetter,
    ):
        self.tracer = tel.tracer()
        self.logger = tel.logger()
        self.active_release_service = active_release_service
        self.active_release_getter = active_release_getter

    def get_dialog(self) -> Dialog:
        return Dialog(
            self.get_view_releases_window(),
            self.get_confirm_dialog_window(),
            self.get_reject_dialog_window(),
        )

    def get_view_releases_window(self) -> Window:
        return Window(
            Multi(
                Const("üöÄ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–ª–∏–∑—ã</b><br><br>"),
                Case(
                    {
                        True: Multi(
                            Format("üì¶ <b>{service_name}</b><br>"),
                            Case(
                                {
                                    False: Format("üè∑Ô∏è <b>Tag:</b> <code>{release_tag}</code><br>"),
                                    True: Multi(
                                        Format("üè∑Ô∏è <b>–ë—ã–ª –æ—Ç–∫–∞—á–∞–Ω –¥–æ:</b> <code>{rollback_to_tag}</code><br>"),
                                        Format("üè∑Ô∏è <b>–¢—ç–≥ –¥–æ –æ—Ç–∫–∞—á–∫–∏ tag:</b> <code>{release_tag}</code><br>"),
                                    ),
                                },
                                selector="has_rollback"
                            ),
                            Format("üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}<br>"),
                            Format("üë§ <b>–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä:</b> <code>{initiated_by}</code><br>"),
                            Format("üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> <code>{created_at_formatted}</code><br>"),
                            Case(
                                {
                                    True: Format(
                                        "üîó <b>GitHub Action:</b> <a href='{github_action_link}'>–û—Ç–∫—Ä—ã—Ç—å</a><br>"),
                                    False: Const(""),
                                },
                                selector="has_github_link"
                            ),
                            Case(
                                {
                                    True: Format("‚è±Ô∏è <b>–í –æ–±—Ä–∞–±–æ—Ç–∫–µ:</b> <i>{waiting_time}</i><br>"),
                                    False: Const(""),
                                },
                                selector="has_waiting_time"
                            ),
                            Case(
                                {
                                    False: Multi(
                                        Const("<br><b>–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</b><br>"),
                                        Format("{required_approve_list_text}<br>"),
                                        Format("üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏:</b><br>"),
                                        Format("{approved_list_text}<br>"),
                                    ),
                                    True: Const("–í—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–±—Ä–∞–Ω—ã"),
                                },
                                selector="is_approved"
                            ),
                        ),
                        False: Multi(
                            Const("üì≠ <b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–ª–∏–∑–æ–≤</b><br><br>"),
                            Const("üí° <i>–í—Å–µ —Ä–µ–ª–∏–∑—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∏–ª–∏ –µ—â—ë –Ω–µ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω—ã</i>"),
                        ),
                    },
                    selector="has_releases"
                ),
                sep="",
            ),

            # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ä–µ–ª–∏–∑–∞–º
            Row(
                Button(
                    Const("‚¨ÖÔ∏è –ü—Ä–µ–¥"),
                    id="prev_release",
                    on_click=self.active_release_service.handle_navigate_release,
                    when="has_prev",
                ),
                Button(
                    Format("üìä {current_index}/{total_count}"),
                    id="counter",
                    on_click=lambda c, b, d: c.answer("üìà –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ä–µ–ª–∏–∑–∞–º"),
                    when="has_releases",
                ),
                Button(
                    Const("‚û°Ô∏è –°–ª–µ–¥"),
                    id="next_release",
                    on_click=self.active_release_service.handle_navigate_release,
                    when="has_next",
                ),
                when="has_releases",
            ),

            Column(
                Row(
                    Button(
                        Const("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"),
                        id="confirm_release",
                        on_click=lambda c, b, d: d.switch_to(model.ActiveReleaseStates.confirm_dialog),
                        when="show_manual_testing_buttons"
                    ),
                    Button(
                        Const("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å"),
                        id="reject_release",
                        on_click=lambda c, b, d: d.switch_to(model.ActiveReleaseStates.reject_dialog),
                        when="show_manual_testing_buttons"
                    ),
                ),
                Button(
                    Const("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"),
                    id="refresh",
                    on_click=self.active_release_service.handle_refresh,
                    when="has_releases",
                ),
                Button(
                    Const("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"),
                    id="back_to_menu",
                    on_click=self.active_release_service.handle_back_to_menu,
                ),
            ),

            state=model.ActiveReleaseStates.view_releases,
            getter=self.active_release_getter.get_releases_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_confirm_dialog_window(self) -> Window:
        return Window(
            Multi(
                Const("‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–ª–∏–∑–∞</b><br><br>"),
                Format("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–ª–∏–∑?<br><br>"),
                Format("üì¶ <b>–°–µ—Ä–≤–∏—Å:</b> <code>{service_name}</code><br>"),
                Format("üè∑Ô∏è <b>Tag:</b> <code>{release_tag}</code><br>"),
                Format("üë§ <b>–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä:</b> <code>{initiated_by}</code><br>"),

                Const("<br><b>–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</b><br>"),
                Format("{required_approve_list_text}<br><br>"),
                Format("üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏:</b><br>"),
                Format("{approved_list_text}<br>"),

                Case(
                    {
                        True: Const(
                            "‚ö†Ô∏è <i>–í–∞—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ, –ø–æ—Å–ª–µ –≤–∞—Å –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –¥–µ–ø–ª–æ–π –Ω–∞ production</i>"),
                        False: Const(""),
                    },
                    selector="is_last_approve"
                ),
                sep="",
            ),
            Row(
                Button(
                    Const("‚úÖ –î–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"),
                    id="confirm_yes",
                    on_click=self.active_release_service.handle_confirm_yes
                ),
                Button(
                    Const("‚ùå –û—Ç–º–µ–Ω–∞"),
                    id="cancel_confirm",
                    on_click=lambda c, b, d: d.switch_to(model.ActiveReleaseStates.view_releases),
                ),
            ),
            state=model.ActiveReleaseStates.confirm_dialog,
            getter=self.active_release_getter.get_confirm_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_reject_dialog_window(self) -> Window:
        return Window(
            Multi(
                Const("‚ùå <b>–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ä–µ–ª–∏–∑–∞</b><br><br>"),
                Format("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —Ä–µ–ª–∏–∑?<br><br>"),
                Format("üì¶ <b>–°–µ—Ä–≤–∏—Å:</b> <code>{service_name}</code><br>"),
                Format("üè∑Ô∏è <b>Tag:</b> <code>{release_tag}</code><br>"),
                Format("üë§ <b>–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä:</b> <code>{initiated_by}</code><br><br>"),
                Const("‚ö†Ô∏è <i>–ü–æ—Å–ª–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ä–µ–ª–∏–∑ –±—É–¥–µ—Ç –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ—É—Å–ø–µ—à–Ω—ã–π</i>"),
                sep="",
            ),
            Row(
                Button(
                    Const("‚ùå –î–∞, –æ—Ç–∫–ª–æ–Ω–∏—Ç—å"),
                    id="reject_yes",
                    on_click=self.active_release_service.handle_reject_yes,
                ),
                Button(
                    Const("‚úÖ –û—Ç–º–µ–Ω–∞"),
                    id="cancel_reject",
                    on_click=lambda c, b, d: d.switch_to(model.ActiveReleaseStates.view_releases),
                ),
            ),
            state=model.ActiveReleaseStates.reject_dialog,
            getter=self.active_release_getter.get_reject_data,
            parse_mode=SULGUK_PARSE_MODE,
        )
